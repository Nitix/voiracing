diff --git a/polyfills/util.js b/polyfills/util.js
index 2194380e7b0e18d14d1ddbd120d97d79e69378d6..dc2931af84492a158a90a2d0984e2d20df8b89e1 100644
--- a/polyfills/util.js
+++ b/polyfills/util.js
@@ -18,7 +18,7 @@
 // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 // USE OR OTHER DEALINGS IN THE SOFTWARE.
-import process from 'process';
+import process from "process";
 var formatRegExp = /%[sdj%]/g;
 export function format(f) {
   if (!isString(f)) {
@@ -26,23 +26,25 @@ export function format(f) {
     for (var i = 0; i < arguments.length; i++) {
       objects.push(inspect(arguments[i]));
     }
-    return objects.join(' ');
+    return objects.join(" ");
   }
 
   var i = 1;
   var args = arguments;
   var len = args.length;
-  var str = String(f).replace(formatRegExp, function(x) {
-    if (x === '%%') return '%';
+  var str = String(f).replace(formatRegExp, function (x) {
+    if (x === "%%") return "%";
     if (i >= len) return x;
     switch (x) {
-      case '%s': return String(args[i++]);
-      case '%d': return Number(args[i++]);
-      case '%j':
+      case "%s":
+        return String(args[i++]);
+      case "%d":
+        return Number(args[i++]);
+      case "%j":
         try {
           return JSON.stringify(args[i++]);
         } catch (_) {
-          return '[Circular]';
+          return "[Circular]";
         }
       default:
         return x;
@@ -50,14 +52,13 @@ export function format(f) {
   });
   for (var x = args[i]; i < len; x = args[++i]) {
     if (isNull(x) || !isObject(x)) {
-      str += ' ' + x;
+      str += " " + x;
     } else {
-      str += ' ' + inspect(x);
+      str += " " + inspect(x);
     }
   }
   return str;
-};
-
+}
 
 // Mark that a method should not be used.
 // Returns a modified function which warns once by default.
@@ -65,7 +66,7 @@ export function format(f) {
 export function deprecate(fn, msg) {
   // Allow for deprecating things in the process of starting up.
   if (isUndefined(global.process)) {
-    return function() {
+    return function () {
       return deprecate(fn, msg).apply(this, arguments);
     };
   }
@@ -90,29 +91,26 @@ export function deprecate(fn, msg) {
   }
 
   return deprecated;
-};
-
+}
 
 var debugs = {};
 var debugEnviron;
 export function debuglog(set) {
-  if (isUndefined(debugEnviron))
-    debugEnviron = process.env.NODE_DEBUG || '';
+  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
   set = set.toUpperCase();
   if (!debugs[set]) {
-    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
+    if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
       var pid = 0;
-      debugs[set] = function() {
+      debugs[set] = function () {
         var msg = format.apply(null, arguments);
-        console.error('%s %d: %s', set, pid, msg);
+        console.error("%s %d: %s", set, pid, msg);
       };
     } else {
-      debugs[set] = function() {};
+      debugs[set] = function () {};
     }
   }
   return debugs[set];
-};
-
+}
 
 /**
  * Echos the value of a value. Trys to print the value out
@@ -126,7 +124,7 @@ export function inspect(obj, opts) {
   // default options
   var ctx = {
     seen: [],
-    stylize: stylizeNoColor
+    stylize: stylizeNoColor,
   };
   // legacy...
   if (arguments.length >= 3) ctx.depth = arguments[2];
@@ -149,73 +147,78 @@ export function inspect(obj, opts) {
 
 // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
 inspect.colors = {
-  'bold' : [1, 22],
-  'italic' : [3, 23],
-  'underline' : [4, 24],
-  'inverse' : [7, 27],
-  'white' : [37, 39],
-  'grey' : [90, 39],
-  'black' : [30, 39],
-  'blue' : [34, 39],
-  'cyan' : [36, 39],
-  'green' : [32, 39],
-  'magenta' : [35, 39],
-  'red' : [31, 39],
-  'yellow' : [33, 39]
+  bold: [1, 22],
+  italic: [3, 23],
+  underline: [4, 24],
+  inverse: [7, 27],
+  white: [37, 39],
+  grey: [90, 39],
+  black: [30, 39],
+  blue: [34, 39],
+  cyan: [36, 39],
+  green: [32, 39],
+  magenta: [35, 39],
+  red: [31, 39],
+  yellow: [33, 39],
 };
 
 // Don't use 'blue' not visible on cmd.exe
 inspect.styles = {
-  'special': 'cyan',
-  'number': 'yellow',
-  'boolean': 'yellow',
-  'undefined': 'grey',
-  'null': 'bold',
-  'string': 'green',
-  'date': 'magenta',
+  special: "cyan",
+  number: "yellow",
+  boolean: "yellow",
+  undefined: "grey",
+  null: "bold",
+  string: "green",
+  date: "magenta",
   // "name": intentionally not styling
-  'regexp': 'red'
+  regexp: "red",
 };
 
-
 function stylizeWithColor(str, styleType) {
   var style = inspect.styles[styleType];
 
   if (style) {
-    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
-           '\u001b[' + inspect.colors[style][1] + 'm';
+    return (
+      "\u001b[" +
+      inspect.colors[style][0] +
+      "m" +
+      str +
+      "\u001b[" +
+      inspect.colors[style][1] +
+      "m"
+    );
   } else {
     return str;
   }
 }
 
-
 function stylizeNoColor(str, styleType) {
   return str;
 }
 
-
 function arrayToHash(array) {
   var hash = {};
 
-  array.forEach(function(val, idx) {
+  array.forEach(function (val, idx) {
     hash[val] = true;
   });
 
   return hash;
 }
 
-
 function formatValue(ctx, value, recurseTimes) {
   // Provide a hook for user-specified inspect functions.
   // Check that value is an object with an inspect function on it
-  if (ctx.customInspect &&
-      value &&
-      isFunction(value.inspect) &&
-      // Filter out the util module, it's inspect function is special
-      value.inspect !== inspect &&
-      // Also filter out any prototype objects using the circular check.
-      !(value.constructor && value.constructor.prototype === value)) {
+  if (
+    ctx.customInspect &&
+    value &&
+    isFunction(value.inspect) &&
+    // Filter out the util module, it's inspect function is special
+    value.inspect !== inspect &&
+    // Also filter out any prototype objects using the circular check.
+    !(value.constructor && value.constructor.prototype === value)
+  ) {
     var ret = value.inspect(recurseTimes, ctx);
     if (!isString(ret)) {
       ret = formatValue(ctx, ret, recurseTimes);
@@ -239,55 +242,59 @@ function formatValue(ctx, value, recurseTimes) {
 
   // IE doesn't make error fields non-enumerable
   // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
-  if (isError(value)
-      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
+  if (
+    isError(value) &&
+    (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)
+  ) {
     return formatError(value);
   }
 
   // Some type of object without properties can be shortcutted.
   if (keys.length === 0) {
     if (isFunction(value)) {
-      var name = value.name ? ': ' + value.name : '';
-      return ctx.stylize('[Function' + name + ']', 'special');
+      var name = value.name ? ": " + value.name : "";
+      return ctx.stylize("[Function" + name + "]", "special");
     }
     if (isRegExp(value)) {
-      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
+      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
     }
     if (isDate(value)) {
-      return ctx.stylize(Date.prototype.toString.call(value), 'date');
+      return ctx.stylize(Date.prototype.toString.call(value), "date");
     }
     if (isError(value)) {
       return formatError(value);
     }
   }
 
-  var base = '', array = false, braces = ['{', '}'];
+  var base = "",
+    array = false,
+    braces = ["{", "}"];
 
   // Make Array say that they are Array
   if (isArray(value)) {
     array = true;
-    braces = ['[', ']'];
+    braces = ["[", "]"];
   }
 
   // Make functions say that they are functions
   if (isFunction(value)) {
-    var n = value.name ? ': ' + value.name : '';
-    base = ' [Function' + n + ']';
+    var n = value.name ? ": " + value.name : "";
+    base = " [Function" + n + "]";
   }
 
   // Make RegExps say that they are RegExps
   if (isRegExp(value)) {
-    base = ' ' + RegExp.prototype.toString.call(value);
+    base = " " + RegExp.prototype.toString.call(value);
   }
 
   // Make dates with properties first say the date
   if (isDate(value)) {
-    base = ' ' + Date.prototype.toUTCString.call(value);
+    base = " " + Date.prototype.toUTCString.call(value);
   }
 
   // Make error with message first say the error
   if (isError(value)) {
-    base = ' ' + formatError(value);
+    base = " " + formatError(value);
   }
 
   if (keys.length === 0 && (!array || value.length == 0)) {
@@ -296,9 +303,9 @@ function formatValue(ctx, value, recurseTimes) {
 
   if (recurseTimes < 0) {
     if (isRegExp(value)) {
-      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
+      return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
     } else {
-      return ctx.stylize('[Object]', 'special');
+      return ctx.stylize("[Object]", "special");
     }
   }
 
@@ -308,7 +315,7 @@ function formatValue(ctx, value, recurseTimes) {
   if (array) {
     output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
   } else {
-    output = keys.map(function(key) {
+    output = keys.map(function (key) {
       return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
     });
   }
@@ -318,67 +325,65 @@ function formatValue(ctx, value, recurseTimes) {
   return reduceToSingleString(output, base, braces);
 }
 
-
 function formatPrimitive(ctx, value) {
-  if (isUndefined(value))
-    return ctx.stylize('undefined', 'undefined');
+  if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
   if (isString(value)) {
-    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
-                                             .replace(/'/g, "\\'")
-                                             .replace(/\\"/g, '"') + '\'';
-    return ctx.stylize(simple, 'string');
+    var simple =
+      "'" +
+      JSON.stringify(value)
+        .replace(/^"|"$/g, "")
+        .replace(/'/g, "\\'")
+        .replace(/\\"/g, '"') +
+      "'";
+    return ctx.stylize(simple, "string");
   }
-  if (isNumber(value))
-    return ctx.stylize('' + value, 'number');
-  if (isBoolean(value))
-    return ctx.stylize('' + value, 'boolean');
+  if (isNumber(value)) return ctx.stylize("" + value, "number");
+  if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
   // For some reason typeof null is "object", so special case here.
-  if (isNull(value))
-    return ctx.stylize('null', 'null');
+  if (isNull(value)) return ctx.stylize("null", "null");
 }
 
-
 function formatError(value) {
-  return '[' + Error.prototype.toString.call(value) + ']';
+  return "[" + Error.prototype.toString.call(value) + "]";
 }
 
-
 function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
   var output = [];
   for (var i = 0, l = value.length; i < l; ++i) {
     if (hasOwnProperty(value, String(i))) {
-      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
-          String(i), true));
+      output.push(
+        formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true)
+      );
     } else {
-      output.push('');
+      output.push("");
     }
   }
-  keys.forEach(function(key) {
+  keys.forEach(function (key) {
     if (!key.match(/^\d+$/)) {
-      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
-          key, true));
+      output.push(
+        formatProperty(ctx, value, recurseTimes, visibleKeys, key, true)
+      );
     }
   });
   return output;
 }
 
-
 function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
   var name, str, desc;
   desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
   if (desc.get) {
     if (desc.set) {
-      str = ctx.stylize('[Getter/Setter]', 'special');
+      str = ctx.stylize("[Getter/Setter]", "special");
     } else {
-      str = ctx.stylize('[Getter]', 'special');
+      str = ctx.stylize("[Getter]", "special");
     }
   } else {
     if (desc.set) {
-      str = ctx.stylize('[Setter]', 'special');
+      str = ctx.stylize("[Setter]", "special");
     }
   }
   if (!hasOwnProperty(visibleKeys, key)) {
-    name = '[' + key + ']';
+    name = "[" + key + "]";
   }
   if (!str) {
     if (ctx.seen.indexOf(desc.value) < 0) {
@@ -387,62 +392,72 @@ function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
       } else {
         str = formatValue(ctx, desc.value, recurseTimes - 1);
       }
-      if (str.indexOf('\n') > -1) {
+      if (str.indexOf("\n") > -1) {
         if (array) {
-          str = str.split('\n').map(function(line) {
-            return '  ' + line;
-          }).join('\n').substr(2);
+          str = str
+            .split("\n")
+            .map(function (line) {
+              return "  " + line;
+            })
+            .join("\n")
+            .substr(2);
         } else {
-          str = '\n' + str.split('\n').map(function(line) {
-            return '   ' + line;
-          }).join('\n');
+          str =
+            "\n" +
+            str
+              .split("\n")
+              .map(function (line) {
+                return "   " + line;
+              })
+              .join("\n");
         }
       }
     } else {
-      str = ctx.stylize('[Circular]', 'special');
+      str = ctx.stylize("[Circular]", "special");
     }
   }
   if (isUndefined(name)) {
     if (array && key.match(/^\d+$/)) {
       return str;
     }
-    name = JSON.stringify('' + key);
+    name = JSON.stringify("" + key);
     if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
       name = name.substr(1, name.length - 2);
-      name = ctx.stylize(name, 'name');
+      name = ctx.stylize(name, "name");
     } else {
-      name = name.replace(/'/g, "\\'")
-                 .replace(/\\"/g, '"')
-                 .replace(/(^"|"$)/g, "'");
-      name = ctx.stylize(name, 'string');
+      name = name
+        .replace(/'/g, "\\'")
+        .replace(/\\"/g, '"')
+        .replace(/(^"|"$)/g, "'");
+      name = ctx.stylize(name, "string");
     }
   }
 
-  return name + ': ' + str;
+  return name + ": " + str;
 }
 
-
 function reduceToSingleString(output, base, braces) {
   var numLinesEst = 0;
-  var length = output.reduce(function(prev, cur) {
+  var length = output.reduce(function (prev, cur) {
     numLinesEst++;
-    if (cur.indexOf('\n') >= 0) numLinesEst++;
-    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
+    if (cur.indexOf("\n") >= 0) numLinesEst++;
+    return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
   }, 0);
 
   if (length > 60) {
-    return braces[0] +
-           (base === '' ? '' : base + '\n ') +
-           ' ' +
-           output.join(',\n  ') +
-           ' ' +
-           braces[1];
+    return (
+      braces[0] +
+      (base === "" ? "" : base + "\n ") +
+      " " +
+      output.join(",\n  ") +
+      " " +
+      braces[1]
+    );
   }
 
-  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
+  return braces[0] + base + " " + output.join(", ") + " " + braces[1];
 }
 
-
 // NOTE: These type checking functions intentionally don't use `instanceof`
 // because it is fragile and can be easily faked with `Object.create()`.
 export function isArray(ar) {
@@ -450,7 +465,7 @@ export function isArray(ar) {
 }
 
 export function isBoolean(arg) {
-  return typeof arg === 'boolean';
+  return typeof arg === "boolean";
 }
 
 export function isNull(arg) {
@@ -462,15 +477,15 @@ export function isNullOrUndefined(arg) {
 }
 
 export function isNumber(arg) {
-  return typeof arg === 'number';
+  return typeof arg === "number";
 }
 
 export function isString(arg) {
-  return typeof arg === 'string';
+  return typeof arg === "string";
 }
 
 export function isSymbol(arg) {
-  return typeof arg === 'symbol';
+  return typeof arg === "symbol";
 }
 
 export function isUndefined(arg) {
@@ -478,33 +493,37 @@ export function isUndefined(arg) {
 }
 
 export function isRegExp(re) {
-  return isObject(re) && objectToString(re) === '[object RegExp]';
+  return isObject(re) && objectToString(re) === "[object RegExp]";
 }
 
 export function isObject(arg) {
-  return typeof arg === 'object' && arg !== null;
+  return typeof arg === "object" && arg !== null;
 }
 
 export function isDate(d) {
-  return isObject(d) && objectToString(d) === '[object Date]';
+  return isObject(d) && objectToString(d) === "[object Date]";
 }
 
 export function isError(e) {
-  return isObject(e) &&
-      (objectToString(e) === '[object Error]' || e instanceof Error);
+  return (
+    isObject(e) &&
+    (objectToString(e) === "[object Error]" || e instanceof Error)
+  );
 }
 
 export function isFunction(arg) {
-  return typeof arg === 'function';
+  return typeof arg === "function";
 }
 
 export function isPrimitive(arg) {
-  return arg === null ||
-         typeof arg === 'boolean' ||
-         typeof arg === 'number' ||
-         typeof arg === 'string' ||
-         typeof arg === 'symbol' ||  // ES6 symbol
-         typeof arg === 'undefined';
+  return (
+    arg === null ||
+    typeof arg === "boolean" ||
+    typeof arg === "number" ||
+    typeof arg === "string" ||
+    typeof arg === "symbol" || // ES6 symbol
+    typeof arg === "undefined"
+  );
 }
 
 export function isBuffer(maybeBuf) {
@@ -515,31 +534,39 @@ function objectToString(o) {
   return Object.prototype.toString.call(o);
 }
 
-
 function pad(n) {
-  return n < 10 ? '0' + n.toString(10) : n.toString(10);
+  return n < 10 ? "0" + n.toString(10) : n.toString(10);
 }
 
-
-var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
-              'Oct', 'Nov', 'Dec'];
+var months = [
+  "Jan",
+  "Feb",
+  "Mar",
+  "Apr",
+  "May",
+  "Jun",
+  "Jul",
+  "Aug",
+  "Sep",
+  "Oct",
+  "Nov",
+  "Dec",
+];
 
 // 26 Feb 16:19:34
 function timestamp() {
   var d = new Date();
-  var time = [pad(d.getHours()),
-              pad(d.getMinutes()),
-              pad(d.getSeconds())].join(':');
-  return [d.getDate(), months[d.getMonth()], time].join(' ');
+  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(
+    ":"
+  );
+  return [d.getDate(), months[d.getMonth()], time].join(" ");
 }
 
-
 // log is just a thin wrapper to console.log that prepends a timestamp
 export function log() {
-  console.log('%s - %s', timestamp(), format.apply(null, arguments));
+  console.log("%s - %s", timestamp(), format.apply(null, arguments));
 }
 
-
 /**
  * Inherit the prototype methods from one constructor into another.
  *
@@ -553,8 +580,8 @@ export function log() {
  *     prototype.
  * @param {function} superCtor Constructor function to inherit prototype from.
  */
-import inherits from './inherits';
-export {inherits}
+import inherits from "./inherits";
+export { inherits };
 
 export function _extend(origin, add) {
   // Don't do anything if add isn't an object
@@ -566,12 +593,80 @@ export function _extend(origin, add) {
     origin[keys[i]] = add[keys[i]];
   }
   return origin;
-};
+}
 
 function hasOwnProperty(obj, prop) {
   return Object.prototype.hasOwnProperty.call(obj, prop);
 }
 
+var kCustomPromisifiedSymbol =
+  typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
+
+export function promisify(original) {
+  // Lazy-load to avoid a circular dependency.
+  if (typeof original !== "function")
+    throw new TypeError('The "original" argument must be of type Function');
+
+  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
+    var fn = original[kCustomPromisifiedSymbol];
+    if (typeof fn !== "function") {
+      throw new TypeError(
+        'The "util.promisify.custom" argument must be of type Function'
+      );
+    }
+    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
+      value: fn,
+      enumerable: false,
+      writable: false,
+      configurable: true,
+    });
+    return fn;
+  }
+
+  // Names to create an object from in case the callback receives multiple
+  // arguments, e.g. ['bytesRead', 'buffer'] for fs.read.
+  function fn() {
+    var promiseResolve, promiseReject;
+    var promise = new Promise(function (resolve, reject) {
+      promiseResolve = resolve;
+      promiseReject = reject;
+    });
+
+    var args = [];
+    for (var i = 0; i < arguments.length; i++) {
+      args.push(arguments[i]);
+    }
+    args.push(function (err, value) {
+      if (err) {
+        promiseReject(err);
+      } else {
+        promiseResolve(value);
+      }
+    });
+
+    try {
+      original.apply(this, args);
+    } catch (err) {
+      promiseReject(err);
+    }
+
+    return promise;
+  }
+
+  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
+
+  if (kCustomPromisifiedSymbol)
+    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
+      value: fn,
+      enumerable: false,
+      writable: false,
+      configurable: true,
+    });
+  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
+}
+
+promisify.custom = kCustomPromisifiedSymbol;
+
 export default {
   inherits: inherits,
   _extend: _extend,
@@ -594,5 +689,6 @@ export default {
   inspect: inspect,
   deprecate: deprecate,
   format: format,
-  debuglog: debuglog
-}
+  debuglog: debuglog,
+  promisify: promisify,
+};
